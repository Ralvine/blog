<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>机考 - 标签 - 暮瞻</title>
        <link>https://blog.ralvines.top/tags/%E6%9C%BA%E8%80%83/</link>
        <description>机考 - 标签 - 暮瞻</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 30 Aug 2023 20:20:40 &#43;0800</lastBuildDate><atom:link href="https://blog.ralvines.top/tags/%E6%9C%BA%E8%80%83/" rel="self" type="application/rss+xml" /><item>
    <title>C&#43;&#43; 面向对象之面试与机考技巧</title>
    <link>https://blog.ralvines.top/c-interview/</link>
    <pubDate>Wed, 30 Aug 2023 20:20:40 &#43;0800</pubDate><author>
                        <name>Ralvine</name><uri>https://blog.ralvines.top/about/praise/</uri><email>ralvine@163.com</email></author><guid>https://blog.ralvines.top/c-interview/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://z1.ax1x.com/2023/11/01/pinHqnH.png" referrerpolicy="no-referrer">
            </div><h2 id="笔试技巧" class="headerLink">
    <a href="#%e7%ac%94%e8%af%95%e6%8a%80%e5%b7%a7" class="header-mark"></a>笔试技巧</h2><ol>
<li>
<p>输入输出</p>
<ul>
<li>带空格 getline</li>
<li>字符串处理 string</li>
<li>大小写转换
<ul>
<li>string: <code>&lt;algorithm&gt;</code> <code>transform(str.begin(),str.end(),str.begin(),::tolower);</code></li>
<li>char: <code>-'a'+'A'</code></li>
</ul>
</li>
<li>进制转换
<ul>
<li><code>bitset</code></li>
<li>8(oct), 10(dec), 16(hex), 2(bitset(num))</li>
</ul>
</li>
<li>取整 (int)直接去除小数点后的部分</li>
</ul>
</li>
<li>
<p>排序 sort 默认升序 自定义规则</p>
<ul>
<li><code>functional greater&lt;Type&gt;</code></li>
</ul>
</li>
<li>
<p>质数 因数分解</p>
<ul>
<li>时间复杂度 先判断n不是素数再进入计算循环</li>
<li>分解到sqrt(n) 剩下的留n即可</li>
</ul>
</li>
</ol>
<h2 id="经典面试题" class="headerLink">
    <a href="#%e7%bb%8f%e5%85%b8%e9%9d%a2%e8%af%95%e9%a2%98" class="header-mark"></a>经典面试题</h2><h3 id="newdelete和mallocfree的区别" class="headerLink">
    <a href="#newdelete%e5%92%8cmallocfree%e7%9a%84%e5%8c%ba%e5%88%ab" class="header-mark"></a>new/delete和malloc/free的区别</h3><ul>
<li>malloc/free是C/C++的库函数，需要stdlib.h；new/delete是C++的关键字；</li>
<li>都可用于申请动态内存和释放内存，new/delete在对象创建的时候自动执行构造函数，对象消亡前自动执行析构函数，底层实现其实也是malloc/free</li>
<li>new无需指定内存块的大小，编译器会根据类型信息自行计算；malloc需要显式地支持所需内存的大小</li>
<li>new返回<strong>指定类型</strong>的指针，无需进行类型转换；malloc默认返回类型为<strong>void</strong>*，必须强行转换为实际类型的指针</li>
<li>new内存分配失败时会抛出bad_alloc异常；malloc失败时返回NULL</li>
</ul>
<h3 id="malloc的底层实现" class="headerLink">
    <a href="#malloc%e7%9a%84%e5%ba%95%e5%b1%82%e5%ae%9e%e7%8e%b0" class="header-mark"></a>malloc的底层实现</h3><p>Linux下：</p>
<ul>
<li>开辟空间小于128K时，通过<strong>brk()函数</strong>
<ul>
<li>将数据段.data的最高地址指针**_edata<strong>向高地址移动，即</strong>增加堆**的有效区域来申请内存空间</li>
<li>brk分配的内存需要等到高地址内存释放以后才能释放，这也是内存碎片产生的原因</li>
</ul>
</li>
<li>开辟空间大于128K时，通过<strong>mmap()函数</strong>
<ul>
<li>利用mmap系统调用，在堆和栈之间<strong>文件映射区域</strong>申请一块虚拟内存</li>
<li>128K限制可由M_MMAP_THRESHOLD选项进行修改</li>
<li>mmap分配的内存可以单独释放</li>
</ul>
</li>
<li>以上只涉及虚拟内存的分配，直到进程第一次访问其地址时，才会通过缺页中断机制分配到物理页中</li>
</ul>
<h3 id="指针和引用的异同点如何相互转换" class="headerLink">
    <a href="#%e6%8c%87%e9%92%88%e5%92%8c%e5%bc%95%e7%94%a8%e7%9a%84%e5%bc%82%e5%90%8c%e7%82%b9%e5%a6%82%e4%bd%95%e7%9b%b8%e4%ba%92%e8%bd%ac%e6%8d%a2" class="header-mark"></a>指针和引用的异同点；如何相互转换</h3><ul>
<li>本质：引用是别名，而指针是地址</li>
<li>指针在运行时可以改变所指向的值，而引用一旦与某个对象绑定之后就不再改变(指向的地址不能改变，但指向的内容可以改变)</li>
<li>指针变量在符号表上对应的地址值为<strong>指针变量的地址值</strong>，而引用在符号表上对应的地址值为<strong>引用对象的地址值</strong>；因此指针可以改变指向的对象，而引用的对象不能修改</li>
<li>由于硬件通过地址访问内存位置，因此引用可以理解为一个常量指针，只能绑定到初始化它的对象上</li>
</ul>
<h3 id="structunion的异同" class="headerLink">
    <a href="#structunion%e7%9a%84%e5%bc%82%e5%90%8c" class="header-mark"></a>struct、union的异同</h3><ul>
<li>struct中每个变量依次存储；union中，每个变量都是从偏移地址零开始存储，同一时刻只有一个成员存储于该地址</li>
<li>struct内存大小遵循<strong>结构对齐</strong>原则
<ul>
<li>数据成员对齐规则：每个数据成员存储的起始位置要从该成员大小的整数倍开始</li>
<li>数据成员包含结构体：结构体成员要从其内部最大元素对象的整数倍地址开始存储</li>
<li>结构体总大小：其内部最大基本成员的整数倍，不足则要补齐</li>
</ul>
</li>
<li>union内存大小为其最大成员的整数倍</li>
</ul>
<h3 id="extern-c的作用" class="headerLink">
    <a href="#extern-c%e7%9a%84%e4%bd%9c%e7%94%a8" class="header-mark"></a>extern C的作用</h3><p>C++支持<strong>函数重载</strong>，即不同名字空间namespace的两个函数原型声明可以完全相同，或者两个函数同名但参数列表不同；g++编译器会对此进行<strong>name mangling</strong>，生成全局唯一的符号名称，使链接器可以准确识别</p>
<p>C语言不支持函数重载，即不允许同名符号，所以不需要这些工作，因此在C++代码中加入extern C，是为了<strong>链接规范</strong></p>
<h3 id="memcpy函数需要注意哪些问题" class="headerLink">
    <a href="#memcpy%e5%87%bd%e6%95%b0%e9%9c%80%e8%a6%81%e6%b3%a8%e6%84%8f%e5%93%aa%e4%ba%9b%e9%97%ae%e9%a2%98" class="header-mark"></a>memcpy()函数需要注意哪些问题</h3><ul>
<li>
<p>函数原型声明void *memcpy(void *dest, void *src, unsigned int count);</p>
</li>
<li>
<p>memcpy函数用于把资源内存（src所指向的内存区域）中连续的count个字节数据拷贝到目标内存（dest所指向的内存区域）</p>
</li>
<li>
<p>数据长度count的单位是字节，1byte = 8bit</p>
</li>
<li>
<p>数据类型为char，则数据长度就等于元素的个数；其他数据类型则要注意数据长度的值</p>
</li>
<li>
<p>n * sizeof(type_name)的写法</p>
</li>
</ul>
<h3 id="strcatstrncatstrcmpstrcpy函数" class="headerLink">
    <a href="#strcatstrncatstrcmpstrcpy%e5%87%bd%e6%95%b0" class="header-mark"></a>strcat、strncat、strcmp、strcpy函数</h3><ul>
<li>strcpy拷贝函数，不会判断拷贝大小，也没有任何安全检查，不会检查目的地址内存是否够用；</li>
<li>strncpy拷贝函数，会计算复制字符串的大小，但没有检查目标的边界；</li>
<li>strcmp比较函数，把src所指向的字符串与dest所指向的字符串进行比较，若dest与src的前n个字符相同，则返回0；若dest大于src，则返回大于0的值；若dest小于src，则返回小于0的值</li>
<li>strcat功能是将两个char类型连接；strncat功能是在字符串的结尾追加n个字符</li>
</ul>
<h3 id="机器大小端问题" class="headerLink">
    <a href="#%e6%9c%ba%e5%99%a8%e5%a4%a7%e5%b0%8f%e7%ab%af%e9%97%ae%e9%a2%98" class="header-mark"></a>机器大小端问题</h3><p>大端指数据的<strong>高字节</strong>保存在内存的<strong>低地址</strong>中，数据的<strong>低字节</strong>保存在内存的<strong>高地址</strong>中；小端与此相反。</p>
<ul>
<li>小端：强制转换数据不需要调整字节内容，1、2、4字节的存储方式一样</li>
<li>大端：符号位的判定固定为第一个字节，很容易判断正负</li>
</ul>
<p>union判断大小端的方法</p>
<ul>
<li>union从低地址开始存，同一时间内只有一个成员占用内存；修改其中一个成员的值必然会影响另一个成员的值</li>
</ul>
<h3 id="static的用法定义和用途" class="headerLink">
    <a href="#static%e7%9a%84%e7%94%a8%e6%b3%95%e5%ae%9a%e4%b9%89%e5%92%8c%e7%94%a8%e9%80%94" class="header-mark"></a>static的用法（定义和用途）</h3><p>修饰</p>
<ul>
<li>局部变量：使其变为<strong>静态存储方式</strong>（静态数据区），函数执行完成之后不会被释放，而是继续保存在内存中；</li>
<li>全局变量：使其只在本文件内部有效，其他文件不可链接或引用该变量；</li>
<li>函数：静态函数，即函数只在本文件内部有效，对其他文件不可见；避免同名干扰，同时保护</li>
</ul>
<h3 id="const的用法定义和用途" class="headerLink">
    <a href="#const%e7%9a%84%e7%94%a8%e6%b3%95%e5%ae%9a%e4%b9%89%e5%92%8c%e7%94%a8%e9%80%94" class="header-mark"></a>const的用法（定义和用途）</h3><p>const起到<strong>强制保护</strong>的修饰作用，可以预防意外改动，提高程序的健壮性</p>
<ul>
<li>const修饰常量：定义时就初始化，以后不能更改；</li>
<li>const修饰形参：func(const int a); 该形参在函数里不能改变；</li>
<li>const修饰类成员函数：const类成员函数不能改变成员变量的数值</li>
</ul>
<h3 id="const常量和define的区别编译阶段安全性内存占用等" class="headerLink">
    <a href="#const%e5%b8%b8%e9%87%8f%e5%92%8cdefine%e7%9a%84%e5%8c%ba%e5%88%ab%e7%bc%96%e8%af%91%e9%98%b6%e6%ae%b5%e5%ae%89%e5%85%a8%e6%80%a7%e5%86%85%e5%ad%98%e5%8d%a0%e7%94%a8%e7%ad%89" class="header-mark"></a>const常量和define的区别（编译阶段、安全性、内存占用等）</h3><ul>
<li>const定义的常量有类型名字，存放在内存的静态区域中，在编译时确定其值；</li>
<li>define定义的常量是没有类型的一个<strong>立即数</strong>，编译器会在预处理阶段将程序中所有使用到该常量的地方进行<strong>拷贝替换</strong>；</li>
<li>由于define的拷贝有很多份，故宏定义的内存占用要高得多</li>
</ul>
<h3 id="volatile的用法" class="headerLink">
    <a href="#volatile%e7%9a%84%e7%94%a8%e6%b3%95" class="header-mark"></a>volatile的用法</h3><p>被定义为volatile的变量可能会被意想不到地改变，编译器不会对volatile变量有关的运算进行<strong>编译优化</strong>：每次使用该变量必须从内存地址中读取，而不是保存在寄存器中的备份</p>
<p>用到volatile的几种情况</p>
<ul>
<li>并行设备的硬件寄存器（如状态寄存器）</li>
<li>中断服务子程序会访问到的非自动变量</li>
<li>多线程应用中被几个任务共享的变量</li>
</ul>
<h3 id="常量指针指针常量常量引用没有引用常量" class="headerLink">
    <a href="#%e5%b8%b8%e9%87%8f%e6%8c%87%e9%92%88%e6%8c%87%e9%92%88%e5%b8%b8%e9%87%8f%e5%b8%b8%e9%87%8f%e5%bc%95%e7%94%a8%e6%b2%a1%e6%9c%89%e5%bc%95%e7%94%a8%e5%b8%b8%e9%87%8f" class="header-mark"></a>常量指针、指针常量、常量引用（没有引用常量）</h3><ul>
<li>常量指针即常量的指针，指针所指向的是个常量，可以被赋值为变量的地址，但是不能通过这个指针来修改</li>
<li>指针常量本质是一个常量，指针所指向的值不可以改变，但指向的地址所对应的内容可以变化</li>
</ul>
<p>（具体参考问题17）</p>
<h3 id="变量的作用域全局变量和局部变量" class="headerLink">
    <a href="#%e5%8f%98%e9%87%8f%e7%9a%84%e4%bd%9c%e7%94%a8%e5%9f%9f%e5%85%a8%e5%b1%80%e5%8f%98%e9%87%8f%e5%92%8c%e5%b1%80%e9%83%a8%e5%8f%98%e9%87%8f" class="header-mark"></a>变量的作用域（全局变量和局部变量）</h3><ul>
<li>全局变量：在所有函数体外部定义的，程序所在部分都可以使用，不受作用域的影响（生命期一直到程序的结束）</li>
<li>局部变量：局限于作用域内，默认为auto关键字修饰，即进入作用域时自动生成，离开作用域时自动消失；</li>
<li>局部变量可以和全局变量重名，在局部变量作用域范围内，全局变量失效，采用的是局部变量的值</li>
</ul>
<h3 id="sizeof和strlen" class="headerLink">
    <a href="#sizeof%e5%92%8cstrlen" class="header-mark"></a>sizeof和strlen</h3><ul>
<li>sizeof是一个操作符或关键字，不是一个函数，而strlen是一个函数</li>
<li>sizeof返回一个对象或类型所占的内存字节数，不会对其中的数据或指针做运算</li>
<li>strlen返回一个字符串的长度，不包括&rsquo;/0'</li>
</ul>
<h3 id="sizeofstruct和内存对齐" class="headerLink">
    <a href="#sizeofstruct%e5%92%8c%e5%86%85%e5%ad%98%e5%af%b9%e9%bd%90" class="header-mark"></a>sizeof(struct)和内存对齐</h3><p>内存对齐作用：</p>
<ul>
<li>移植原因：某些硬件平台只能在某些特定地址处取特定类型的数据；</li>
<li>性能原因：数据结构(尤其是栈)应尽可能在自然边界上对齐，未对齐内存需要做两次内存访问，对齐内存仅需要一次</li>
</ul>
<p>struct内存对齐原则：</p>
<ul>
<li>结构体成员中，第一个成员偏移量是0，排列在后面的成员的当前偏移量必须是当前成员类型的整数倍</li>
<li>结构体本身占用内存大小，应是结构体内最大数据成员的最小整数倍</li>
<li>**pragma pack(n)**预编译指令，所有成员对齐以n字节为准，不再考虑当前类型和最大结构体内类型</li>
</ul>
<p>union内存对齐原则：</p>
<ul>
<li>union字节数必须是占用字节数最多的成员的字节数的倍数，而且需要能够容纳其他成员</li>
</ul>
<h3 id="char--constconst-char-" class="headerLink">
    <a href="#char--constconst-char-" class="header-mark"></a>char * const，const char *</h3><ul>
<li>const char <em>ptr指向字符常量的指针，ptr是一个char</em>类型的常量，所指向的内容不能修改；</li>
<li>char * const ptr指向字符的指针常数，即const指针，不能修改ptr指针，但可以修改该指针指向的内容</li>
</ul>]]></description>
</item></channel>
</rss>
