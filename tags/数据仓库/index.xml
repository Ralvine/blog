<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>数据仓库 - 标签 - 暮瞻</title>
        <link>https://blog.ralvines.top/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</link>
        <description>数据仓库 - 标签 - 暮瞻</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 22 Oct 2023 20:20:40 &#43;0800</lastBuildDate><atom:link href="https://blog.ralvines.top/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/" rel="self" type="application/rss+xml" /><item>
    <title>SQL 强化</title>
    <link>https://blog.ralvines.top/sql/</link>
    <pubDate>Sun, 22 Oct 2023 20:20:40 &#43;0800</pubDate><author>
                        <name>Ralvine</name><uri>https://blog.ralvines.top/about/praise/</uri><email>ralvine@163.com</email></author><guid>https://blog.ralvines.top/sql/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://z1.ax1x.com/2023/10/23/piAtBlV.png" referrerpolicy="no-referrer">
            </div><h2 id="mysql12" class="headerLink">
    <a href="#mysql12" class="header-mark"></a>MySQL<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></h2><ul>
<li>语法 select-from-where-group by-having-order by-limit</li>
<li>运行 from-where-group by-having-order by-limit-select</li>
</ul>
<h3 id="基础语句" class="headerLink">
    <a href="#%e5%9f%ba%e7%a1%80%e8%af%ad%e5%8f%a5" class="header-mark"></a>基础语句</h3><ol>
<li>select &amp; from</li>
</ol>
<ul>
<li><code>select 字段（展示） from 表（数据来源）</code></li>
<li><code>*</code> 所有列</li>
<li><code>as</code> 别名</li>
<li><code>distinct</code> 去重，必须置首</li>
<li>计算（必须包含被引用的字段，除非可以独立计算）</li>
<li><code>select gdp, distinct population, gdp/population as averGDP from world</code></li>
</ul>
<ol start="2">
<li>where</li>
</ol>
<ul>
<li>筛选行数据</li>
<li><code>where 字段名 运算符 值</code></li>
<li>比较符 <code>=, &gt;, &lt;, &gt;=, &lt;=, &lt;&gt;, !=</code></li>
<li>条件范围 <code>in (...), not in, between and（闭区间）, is null, is not null</code></li>
<li>逻辑 <code>and, or, not</code></li>
<li>模糊查询 <code>like 通配符 字符</code>，通配符 <code>%, _</code> 匹配单个或多个字符</li>
<li><code>where population &gt;= 20, name in ('Germany', 'Norway')</code></li>
</ul>
<ol start="3">
<li>order by</li>
</ol>
<ul>
<li>规定结果集显示顺序</li>
<li><code>asc, desc</code> 默认升序</li>
<li>主字段</li>
<li>将某些排最后 <code>order by subject in ('chem','phys'), subject</code></li>
</ul>
<ol start="4">
<li>limit</li>
</ol>
<ul>
<li><code>limit [位置偏移量,] 行数</code></li>
<li>返回排名第4-7的数据 <code>order by area desc limit 3,4</code></li>
</ul>
<ol start="5">
<li>group by</li>
</ol>
<ul>
<li><code>group by 字段名</code></li>
<li>直接使用只取对应组的第一个</li>
<li>和聚合函数连用 <code>AVG(), COUNT(), MAX(), MIN(), SUM()</code>，计算组内结果</li>
<li>和where的区别：可以对各组进行单独求解</li>
<li>查询nobel表中2013-2015每年每科目获奖人数，按各年人数降序</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">yr</span><span class="p">,</span><span class="w"> </span><span class="n">subject</span><span class="p">,</span><span class="w"> </span><span class="k">count</span><span class="p">(</span><span class="n">winner</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">nobel</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">yr</span><span class="w"> </span><span class="k">between</span><span class="w"> </span><span class="mi">2013</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="mi">2015</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">group</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">yr</span><span class="p">,</span><span class="w"> </span><span class="n">subject</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">yr</span><span class="w"> </span><span class="k">desc</span><span class="p">,</span><span class="w"> </span><span class="k">count</span><span class="p">(</span><span class="n">winner</span><span class="p">)</span><span class="w"> </span><span class="k">desc</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ol start="6">
<li>having</li>
</ol>
<ul>
<li>对分组后数据进行筛选</li>
</ul>
<h3 id="主要函数" class="headerLink">
    <a href="#%e4%b8%bb%e8%a6%81%e5%87%bd%e6%95%b0" class="header-mark"></a>主要函数</h3><ol>
<li><code>round(x,y)</code></li>
</ol>
<ul>
<li>四舍五入精确到小数点后y位，y负数仅保留</li>
<li><code>round(14.15,-1)=10</code></li>
</ul>
<ol start="2">
<li><code>concat(s1,s2,...)</code></li>
</ol>
<ul>
<li>连接字符串</li>
<li><code>concat('My',null,'SQL')=null</code></li>
</ul>
<ol start="3">
<li><code>replace(s,s1,s2)</code></li>
</ol>
<ul>
<li>用s2替换s中所有s1</li>
</ul>
<ol start="4">
<li><code>left(s,n), right(s,n), substring(s,n,len)</code></li>
</ol>
<ul>
<li>返回左边或右边n个字符</li>
<li>返回第n个起（负数则从右起）长度为len的子字符串，无len取到底</li>
</ul>
<ol start="5">
<li><code>cast(x as type)</code></li>
</ol>
<ul>
<li><code>char(n), date, time, datetime, decimal</code></li>
</ul>
<ol start="6">
<li><code>year(date), month(date), day(date)</code></li>
</ol>
<ul>
<li><code>month(2021-08-21)=8</code></li>
</ul>
<ol start="7">
<li><code>date_add(date,interval expr type), date_sub(...)</code></li>
</ol>
<ul>
<li>type: <code>second, minute, hour, day, week, month, quarter, year</code></li>
<li><code>date_sub('2021-08-03 23:59:59',interval 2 month)=2021-06-03 23:59:59</code></li>
</ul>
<ol start="8">
<li><code>datediff(date1,date2)</code></li>
</ol>
<ul>
<li>计算间隔天数</li>
</ul>
<ol start="9">
<li><code>date_format(date,format)</code></li>
</ol>
<ul>
<li>format 参见<a href="https://www.w3school.com.cn/sql/func_date_format.asp" target="_blank" rel="noopener noreferrer">此表</a></li>
</ul>
<ol start="10">
<li><code>if(expr,v1,v2)</code></li>
</ol>
<ul>
<li><code>if(1&lt;2,'Y','N')=Y</code></li>
</ul>
<ol start="11">
<li><code>case expr when v1 then r1[when v2 then r2] ... [else rn] end</code></li>
</ol>
<h3 id="高级语句" class="headerLink">
    <a href="#%e9%ab%98%e7%ba%a7%e8%af%ad%e5%8f%a5" class="header-mark"></a>高级语句</h3><ol>
<li>窗口函数</li>
</ol>
<ul>
<li><code>over([partition by 字段][order by 字段 asc/desc])</code></li>
<li>排序窗口 <code>rank()over(), dense_rank()over(), row_number()over()</code></li>
<li>偏移分析 <code>lag(字段名,偏移量[,默认值])over(), lead(字段名,偏移量[,默认值])over()</code></li>
</ul>
<p><strong>例题</strong></p>
<ul>
<li>对每年票数从高到低赋予名次 <code>rank()over(partition by yr order by votes desc) as posn</code></li>
<li><a href="https://sglzoo.net/wiki/Window_LAG" target="_blank" rel="noopener noreferrer"><strong>covid每天新增人数</strong></a></li>
</ul>
<ol start="2">
<li>
<p>表连接</p>
</li>
<li>
<p>子查询</p>
</li>
</ol>
<h2 id="spark-sql3" class="headerLink">
    <a href="#spark-sql3" class="header-mark"></a>Spark SQL<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></h2><h2 id="pyspark4" class="headerLink">
    <a href="#pyspark4" class="header-mark"></a>PySpark<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></h2><h2 id="hive-sql5" class="headerLink">
    <a href="#hive-sql5" class="header-mark"></a>Hive SQL<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></h2><h3 id="常见问题6" class="headerLink">
    <a href="#%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%986" class="header-mark"></a>常见问题<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup></h3><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>SQL从入门到实战 @戴师兄 <a href="https://yrzu9y4st8.feishu.cn/mindnotes/bmncn7s9I4IyCLgrrQCskdP7dRf" target="_blank" rel="noopener noreferrer">https://yrzu9y4st8.feishu.cn/mindnotes/bmncn7s9I4IyCLgrrQCskdP7dRf</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>数据库（SQL）面试题，基础知识（超全面） @weihubeats <a href="https://blog.csdn.net/qq_42651904/article/details/83146345" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_42651904/article/details/83146345</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Spark SQL从入门到精通 @浪尖 <a href="https://zhuanlan.zhihu.com/p/45729547" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/45729547</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>3万字长文 PySpark入门级学习教程，框架思维 @小晨说数据 <a href="https://zhuanlan.zhihu.com/p/395431025" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/395431025</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>一文学完所有的Hive Sql（两万字最全详解） @五分钟学大数据 <a href="https://blog.csdn.net/helloHbulie/article/details/115376657" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/helloHbulie/article/details/115376657</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>SQL经典50题&amp;答案 @胖熊酱 <a href="https://zhuanlan.zhihu.com/p/67645448" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/67645448</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description>
</item></channel>
</rss>
